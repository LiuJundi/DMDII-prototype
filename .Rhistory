y <- c(TRUE, FALSE)
z <- c(4,3,2,1)
## ---- results="hide"-----------------------------------------------------
class(x)
is.vector(x)
names(x) <- c("one", "two", "three", "four")
x
## ---- results="hide"-----------------------------------------------------
x[1]
x["one"]
x[-c(2:4)]
x[x == 1]
## ---- results="hide"-----------------------------------------------------
mean(x)
sum(x)
length(x)
prod(x)
var(x)
sd(x)
min(x); max(x) #you can use a semi colon to have multiple commands on the same line.
data(coronary)
data(coronary)
iris
install.packages("bnlearn")
library(bnlearn)
data(coronary)
bn_df <- data.frame(coronary)
res <- hc(bn_df)
plot(res)
res
View(bn_df)
res$arcs <- res$arcs[-which((res$arcs[,'from'] == "M..Work" & res$arcs[,'to'] == "Family")),]
plot(res)
fittedbn <- bn.fit(res, data = bn_df)
fittedbn
print(fittedbn$Proteins)
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no") )
cpquery(fittedbn, event = (Proteins=="<3"), evidence = ( Smoking=="no" & Pressure==">140" ) )
cpquery(fittedbn, event = (Pressure==">140"), evidence = ( Proteins=="<3" ) )
View(bn_df)
View(coronary)
View(bn_df)
install.packages('alr4')
snake
library(ggplot2)
library(dplyr)
library(alr4)
data(snake)
df.data2 <- data(snake)
df.data2
snake
df.data2 <- snake
test <- lm(snake$Y~snake$X)
tes
test
summary(test)
SYY <- sum((snake$Y - mean(snake$Y))^2)
SXY <- sum((snake$X - mean(snake$X))*(snake$Y - mean(snake$Y)))
SXX <- sum((snake$X - mean(snake$X))^2)
RSS <- SYY - (SXY^2)/SXX
length(snake)-2
nrow(snake)-2
sigma2 <- RSS/(nrow(snake)-2)
x.bar <- mean(snake$X)
SYY <- sum((snake$Y - mean(snake$Y))^2)
SXY <- sum((snake$X - mean(snake$X))*(snake$Y - mean(snake$Y)))
SXX <- sum((snake$X - mean(snake$X))^2)
RSS <- SYY - (SXY^2)/SXX
sigma2 <- RSS/(nrow(snake)-2)
SEB1 <- sigma2/(SXX^(1/2))
SEB0 <- sigma2*((1/nrow(snake)+(x.bar^2)/SXX)^(1/2))
r2 <- (SXY^2)/(SXX*SYY)
x.bar <- mean(snake$X)
y.bar <- mean(snake$Y)
SYY <- sum((snake$Y - mean(snake$Y))^2)
SXY <- sum((snake$X - mean(snake$X))*(snake$Y - mean(snake$Y)))
SXX <- sum((snake$X - mean(snake$X))^2)
RSS <- SYY - (SXY^2)/SXX
B1 <- SXY/SXX
B0 <- y.bar - B1*x.bar
SEB1 <- sigma2/(SXX^(1/2))
SEB0 <- sigma2*((1/nrow(snake)+(x.bar^2)/SXX)^(1/2))
r2 <- (SXY^2)/(SXX*SYY)
t1.2 <- (B0 - 0)/SEB0
p1.2 <- 2*pt(-abs(t.12), df=nrow(snake)-2)
p1.2 <- 2*pt(-abs(t1.2), df=nrow(snake)-2)
t1.3 <- (B1-0)/SEB1
p1.3 <- 2*pt(-abs(t1.3), df=nrow(snake)-2)
((SXY^2)/SXX)/sigma2
B1/SEB1
(B1/SEB1)^2
(SXY^2)/SXX
RSS <- SYY - (SXY^2)/SXX
RSS
1.553^2
SXX^(1/2)
sqrt(SXX)
x.bar <- mean(snake$X)
y.bar <- mean(snake$Y)
SYY <- sum((snake$Y - mean(snake$Y))^2)
SXX <- sum((snake$X - mean(snake$X))^2)
RSS <- SYY - (SXY^2)/SXX
B1 <- SXY/SXX
B0 <- y.bar - B1*x.bar
sigma2 <- RSS/(nrow(snake)-2)
SEB0 <- sqrt(sigma2)*sqrt(1/nrow(snake)+(x.bar^2)/SXX)
covB1B0 <- -sigma2*(x.bar/SXX)
t1.2 <- (B0 - 0)/SEB0
p1.2 <- 2*pt(-abs(t1.2), df=nrow(snake)-2)
t1.3 <- (B1-0)/SEB1
p1.3 <- 2*pt(-abs(t1.3), df=nrow(snake)-2)
((SXY^2)/SXX)/sigma2
SYY - (SXY^2)/SXX
(SXY^2)/SXX
((SXY^2)/SXX)/sigma
((SXY^2)/SXX)/sigma2
summary(test)
resid(test)
sqrt(SXX)
sqrt(sigma2)
B1/SEB1
RSS/15
t1.3^2
sqrt(101.2)
snake$X - x.bar
(snake$X - x.bar)*(snake$Y - y.bar)
test
test$residuals
test$df.residual
SYY <- sum((snake$Y - y.bar)*(snake$Y - y.bar))
SXY <- sum((snake$X - x.bar)*(snake$Y - y.bar))
SXX <- sum((snake$X - x.bar)*(snake$X - x.bar))
B1 <- SXY/SXX
B0 <- y.bar - B1*x.bar
t1.2 <- (B0)/SEB0
SEB1 <- sigma2/(sqrt(SXX))
SEB1 <- sigma2/(sqrt(SXX))
SEB1 <- sqrt(sigma2)/(sqrt(SXX))
SEB0 <- sqrt(sigma2)*sqrt(1/nrow(snake)+(x.bar^2)/SXX)
x.bar <- mean(snake$X)
y.bar <- mean(snake$Y)
SXY <- sum((snake$X - x.bar)*(snake$Y - y.bar))
SXX <- sum((snake$X - x.bar)*(snake$X - x.bar))
B1 <- SXY/SXX
B0 <- y.bar - B1*x.bar
sigma2 <- RSS/(15)
SEB1 <- sqrt(sigma2)/(sqrt(SXX))
SEB0 <- sqrt(sigma2)*sqrt(1/nrow(snake)+(x.bar^2)/SXX)
covB1B0 <- -sigma2*(x.bar/SXX)
t1.2 <- (B0)/SEB0
p1.2 <- 2*pt(-abs(t1.2), df=15)
t1.3 <- (B1)/SEB1
p1.3 <- 2*pt(-abs(t1.3), df=15)
summary(test)
lm.snake <- lm(snake$Y~snake$X)
lm.snake0 <- lm(snake$Y~0+snake$X)
summary(lm.snake0)
summary(lm.snake)
sqrt(sigma2)
summary(lm.snake0)
lm.snake0$coefficients
lm.snake0$coefficients[1]
lm.snake0$fitted.values
lm.snake0$terms
summary(lm.snake0)
qt(1,1)
qt(.975,2)
qt(.975,1000)
qt(.975,15)
plot(lm.snake0)
plot(lm.snake0)[1]
plot(lm.snake0,which=1)
plot(lm.snake0,which=1)
library(ggplot2)
library(dplyr)
library(alr4)
df.data <- read.csv('hw2listings.csv',header = TRUE)
mean(df.data$review_scores_rating)
df.data$review_scores_rating
mean(df.data$review_scores_rating, na.rm = TRUE)
n <- 40
set.seed(343)
x1<-rnorm(n)
x2<-2-3*x1
y<-rnorm(n,mean=4+x1+x2,sd=1)
lm.1<-lm(y~x1+x2)
summary(lm.1)
lm.1.2 <- lm(y~x2+x1)
summary(lm.1.2)
n <- 40
set.seed(343)
x1<-rnorm(n)
x2<-2-3*x1
y<-rnorm(n,mean=4+x1+x2,sd=1)
lm.1<-lm(y~x1+x2)
summary(lm.1)
lm.1.2 <- lm(y~x2+x1)
summary(lm.1.2)
n <- 40
set.seed(101)
x1<-rnorm(n)
x2<-2-3*x1
x2.err<-x2 + runif(n, min=-0.01, max=0.01)
y4<-rnorm(n,mean=4+x1+x2.err, sd=1)
lm.4<-lm(y4~x1+x2.err)
summary(lm.4)
n <- 40
set.seed(101)
x1<-rnorm(n)
x2<-2-3*x1
x2.err<-x2 + runif(n, min=-0.01, max=0.01)
y4<-rnorm(n,mean=4+x1+x2.err, sd=1)
lm.4<-lm(y4~x1+x2.err)
summary(lm.4)
dm.lm4 <- model.matrix((lm.4))
lm.lm4.values <- eigen(t(dm.lm4)%*%lm.lm4)$values
dm.lm4.values <- eigen(t(dm.lm4)%*%lm.lm4)$values
dm.lm4.values <- eigen(t(dm.lm4)%*%dm.lm4)$values
dm.lm4.values
library(alr4)
df.p1 <- BGSgirls
lm1.2 <- lm(Soma~LG9+WT9,data=df.p1)
lm1.3 <- lm(Soma~LG9,data=df.p1)
pairs(~Soma+LG9+WT9,data=df.p1, main="Multiple Scatterplot Matrix")
library(alr4)
df.p1 <- BGSgirls
lm1.2 <- lm(Soma~LG9+WT9,data=df.p1)
lm1.3 <- lm(Soma~LG9,data=df.p1)
pairs(~Soma+LG9+WT9,data=df.p1, main="Multiple Scatterplot Matrix")
avPlots(lm1.2, ~WT9)
library(alr4)
df.p1 <- BGSgirls
lm1.2 <- lm(Soma~LG9+WT9,data=df.p1)
lm1.3 <- lm(Soma~WT9+LG9,data=df.p1)
aov1.4 <- anova(lm1.2)
aov1.5 <- anova(lm1.2)
summary(aov1.4)
aov1.4
aov1.5
aov1.5 <- anova(lm1.3)
aov1.5
aov1.5
avPlots(lm1.2, ~WT9)
aov1.4
set.seed(102)
x1 <- runif(60,min=-1,max=6)
x2 <- rbinom(60,size=3,prob=0.7)
set.seed(102)
x1 <- runif(60,min=-1,max=6)
x2 <- rbinom(60,size=3,prob=0.7)
error <- rnorm(60, mean = 0, sd = 1)
y <- 3-1.7*x1+error
plot(x1,y)
avPlots(lm1.2, ~WT9, main="Added")
avPlots(lm1.2, ~WT9, main="Added variable plot of Age 9 weight")
avPlots(lm1.2, ~WT9, main="Added variable plot of Age 9 weight")
avPlots(lm1.2, ~WT9, main="Added variable plot of Age 9 weight")
avPlots(lm1.2, ~WT9, main="Added variable plot of Age 9 weight")
plot(x1,y, main="Scatter plot of y versus x1")
avPlots(lm(y~x1+x2), ~x1, main="Added variable plot of Age 9 weight")
plot(x1,y, main="Scatter plot of y versus x1")
avPlots(lm(y~x1+x2), ~x1, main="Added variable plot of Age 9 weight")
plot(x1,y, main="Scatter plot of y versus x1")
avPlots(lm(y~x1+x2), ~x1, main="Added variable plot of Age 9 weight")
set.seed(102)
x1 <- runif(60,min=-1,max=6)
x2 <- rbinom(60,size=3,prob=0.7)
error <- rnorm(60, mean = 0, sd = 1)
y <- 3-1.7*x1+error
lm1 <- lm(y~x1+x2)
aov1 <- anova(lm1)
set.seed(102)
x1 <- runif(60,min=-1,max=6)
x2 <- rbinom(60,size=3,prob=0.7)
error <- rnorm(60, mean = 0, sd = 1)
y <- 3-1.7*x1+error
lm1 <- lm(y~x1+x2)
aov2.2 <- anova(lm1)
aov2.2
library(data.table)
library(dplyr)
equalWidth <- function(n, df) {
for (i in 1:n) {
quantile(df, c(seq(0, 1, by=1/n)))[i+1]
df[(df>=quantile(df, c(seq(0, 1, by=1/n)))[i]) & (df<=quantile(df, c(seq(0, 1, by=1/n)))[i+1])] <- i
}
return(df)
}
df.sa <- fread('data\\new\\SA.csv', header = T, sep=',',na.strings=c(""))
df.carrier <- fread('data\\new\\CARRIER.csv', header = T, sep=',',na.strings=c(""))
df.cargo <- fread('data\\new\\CARGO.csv', header = T, sep=',',na.strings=c(""))
df.driver <- fread('data\\new\\DRIVER.csv', header = T, sep=',',na.strings=c(""))
library(data.table)
library(bnlearn)
setwd('D:\\Program File\\Git\\git_projects\\STATS 504\\ProjectProposal\\stat-504-airbnb\\data')
lm2.3 <- lm(Distance~I(Speed^2),data=df.2,weights=(1/Speed))
library(alr4)
library(ggplot2)
library(knitr)
library(MASS)
library(boot)
df.1 <- salarygov
p <- ggplot(df.1, aes(x=NE, y=MaxSalary))
p + geom_point() + ggtitle("Max Salary depending on number of employees employed in each job class") + xlab("Number of Employees employed in job class") + ylab("Max Salary ($)")
df.2 <- stopping
p <- ggplot(df.2, aes(x=Speed, y=Distance))
p + geom_point() + ggtitle("Stopping distance depending on speed") + xlab("Speed (mph)") + ylab("Stopping Distance (feet)") + geom_smooth(method="lm", se=FALSE, color="red") +
geom_smooth(method = "lm", se = FALSE, formula= y ~ splines::bs(x,3))
lm2.2 <- lm(Distance~I(Speed^2),data=df.2)
plot(lm2.2,1)
lm2.3 <- lm(Distance~I(Speed^2),data=df.2,weights=(1/Speed))
summary(lm2.3)
library(alr4)
library(faraway)
library(MASS)
clear()
data = readRDS("Quiz2Data.RDS")
pairs(data, pch=16, col=rgb(0,0,0,0.5))
install.packages("shinydashboard")
install.packages("plotly")
install.packages("timevis")
shiny::runApp('D:/Games/Downloads')
shiny::runApp('D:/Program File/Git/git_projects/RA/DataVis')
(shiny.port = 7775)
options(shiny.host = "192.168.1.36")
options(shiny.port = 7775)
runApp(app)
shiny::runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
options(shiny.host = "216.243.41.19")
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
options(shiny.port = 7775)
shiny::runApp('D:/Program File/Git/git_projects/RA/DataVis')
options(shiny.host = "192.168.1.36")
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
shiny::runApp('D:/Program File/Git/git_projects/RA/DataVis')
runApp('D:/Program File/Git/git_projects/RA/DataVis')
library(dplyr)
library(ggplot2)
library(stringdist)
library(tm)
library(reshape2)
wd <- 'D:\\OneDrive\\Documents\\RA\\DMDII\\qtr'
setwd(wd)
df.data <- read.csv('SalesOrdersLines-05222017.csv', header = TRUE,
colClasses = c(rep("factor",4),"character","numeric","factor","character","factor","factor","character","numeric","factor","numeric"))
df.data$required_date <- as.Date(df.data$required_date, format="%d-%b-%y")
#str <- as.vector(df.data$item_description)
#dist <- stringdistmatrix(str, str)
#cutree(cl,2)
#Item ID
#so_qty
boxplot(df.data$so_qty)
#req_date
boxplot(as.integer(df.data$required_date[df.data$remaining_qty>0 & df.data$required_date >= as.Date("2017-05-22")]-as.Date("2017-05-22")))
#remaining_qty
boxplot(df.data$remaining_qty[df.data$remaining_qty>0]/df.data$so_qty[df.data$remaining_qty>0])
#Item Description
#Stip these words: rev, numbers, punctuations, numbers+letters,
df.data$item_description <- tolower(df.data$item_description)
df.data$drawing_description <- tolower(df.data$drawing_description)
df.data$item_description <- removePunctuation(df.data$item_description, preserve_intra_word_dashes = TRUE)
df.data$item_description <- gsub('\\S+([0-9])\\S+','',df.data$item_description)
df.data$item_description <- sub("rev.*","",df.data$item_description)
df.data$item_description <- removeNumbers(df.data$item_description)
df.data$item_description <- removePunctuation(df.data$item_description)
df.data$drawing_description <- removePunctuation(df.data$drawing_description, preserve_intra_word_dashes = TRUE)
df.data$drawing_description <- gsub('\\S+([0-9])\\S+','',df.data$drawing_description)
df.data$drawing_description <- sub("rev.*","",df.data$drawing_description)
df.data$drawing_description <- removeNumbers(df.data$drawing_description)
df.data$drawing_description <- removePunctuation(df.data$drawing_description)
df.data$norm_descr <- ifelse(df.data$drawing_description == "",df.data$item_description, df.data$drawing_description)
df.data$norm_descr <- trimws(df.data$norm_descr)
df.data <- df.data %>% filter(!norm_descr == "")
df.data$norm_descr <- sub("^(\\S*\\s+\\S+).*", "\\1",df.data$norm_descr)
uniqueModels <- unique(df.data$norm_descr)
distanceModels <- stringdistmatrix(uniqueModels, uniqueModels, method="jw")
rownames(distanceModels) <- uniqueModels
colnames(distanceModels) <- uniqueModels
hc <- hclust(as.dist(distanceModels))
dfClust <- data.frame(uniqueModels, cluster=as.factor(cutree(hc, k=14)))
df.data <- df.data %>% rowwise() %>% mutate(cluster = dfClust$cluster[dfClust$uniqueModels==norm_descr])
summary(df.data$cluster)
meltedDist <- melt(distanceModels)
ggplot(data=meltedDist, aes(x=Var1, y=Var2, fill=value)) + geom_tile() + scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 30, limit = c(0,65), space = "Lab",
name="Pearson\nCorrelation")
#Maybe 11-14 groups
#Get rid of rows with: HOLD ORDER OPEN,customs, fees, for, owned, Terex, R/W/G, (\%), work-in-progress
summary(df.data$cluster)
View(dfClust)
View(df.data)
p <- ggplot(data=df.data, aes(x=cluster, y=so_qty, groups=cluster))
p + geom_boxplot()
p <- ggplot(data=df.data, aes(x=cluster, y=so_qty, group=cluster))
p + geom_boxplot()
df.data <- df.data %>% filter(so_qty < 75000)
p <- ggplot(data=df.data, aes(x=cluster, y=so_qty, group=cluster))
p + geom_boxplot()
df.data <- df.data %>% filter(so_qty < 7500)
p <- ggplot(data=df.data, aes(x=cluster, y=so_qty, group=cluster))
p + geom_boxplot()
p + geom_boxplot() + labs(y="order quantity")
p + geom_boxplot() + labs(y="order quantity") + ggtitle("Order quantities by cluster")
df.data[df.data$remaining_qty > 0,]
p <- ggplot(data=df.data[df.data$remaining_qty > 0,], aes(x=cluster, y=remaining_qty, group=cluster))
p + geom_boxplot() + labs(y="remaining order quantity") + ggtitle("Remaining order quantities by cluster")
shiny::runApp()
runApp()
runApp()
runApp('D:/Program File/Git/git_projects/RA/MCMIS/BN_SR/viz')
runApp()
runApp()
setwd('D:\\Program File\\Git\\git_projects\\RA\\VizProto\\DMDII-prototype')
df.data$item_description <- tolower(df.data$item_description)
df.data$drawing_description <- tolower(df.data$drawing_description)
df.data$item_description <- removePunctuation(df.data$item_description, preserve_intra_word_dashes = TRUE)
df.data$item_description <- gsub('\\S+([0-9])\\S+','',df.data$item_description)
df.data$item_description <- sub("rev.*","",df.data$item_description)
df.data$item_description <- removeNumbers(df.data$item_description)
df.data$item_description <- removePunctuation(df.data$item_description)
df.data$drawing_description <- removePunctuation(df.data$drawing_description, preserve_intra_word_dashes = TRUE)
df.data$drawing_description <- gsub('\\S+([0-9])\\S+','',df.data$drawing_description)
df.data$drawing_description <- sub("rev.*","",df.data$drawing_description)
df.data$drawing_description <- removeNumbers(df.data$drawing_description)
df.data$drawing_description <- removePunctuation(df.data$drawing_description)
df.data$norm_descr <- ifelse(df.data$drawing_description == "",df.data$item_description, df.data$drawing_description)
df.data$norm_descr <- trimws(df.data$norm_descr)
df.data <- df.data %>% filter(!norm_descr == "")
df.data$norm_descr <- sub("^(\\S*\\s+\\S+).*", "\\1",df.data$norm_descr)
View(dfClust)
dfClust$delDays <- floor(runif(1, min=3, max = 364))
dfClust$delDays <- floor(runif(615, min=3, max = 364))
dfClust$CIdelDays <- floor(runif(615, min=3, max = 14))
df.data <- df.data %>% rowwise() %>% mutate(cluster = dfClust$cluster[dfClust$uniqueModels==norm_descr],
delDays = dfClust$delDays[dfClust$uniqueModels==norm_descr],
CIdelDays = dfClust$CIdelDays[dfClust$uniqueModels==norm_descr])
View(df.data)
setwd('D:\\Program File\\Git\\git_projects\\RA\\VizProto\\DMDII-prototype')
write.csv(df.data, 'SalesOrdersLines-05222017.csv', row.names = FALSE)
runApp('D:/OneDrive/Documents/RA/DMDII/qtr')
runApp('D:/OneDrive/Documents/RA/DMDII/qtr')
runApp('D:/OneDrive/Documents/RA/DMDII/qtr')
runApp('D:/OneDrive/Documents/RA/DMDII/qtr')
runApp('D:/OneDrive/Documents/RA/DMDII/qtr')
install.packages('maker')
install.packages('makeR')
install.packages('makeR', repos='http://cran.r-project.org')
require(devtools)
install_github('makeR', 'jbryer')
install.packages('D:\\Program File\\Git\\git_projects\\RA\\VizProto\\DMDII-prototype\\makeR_1.0.1.tar.gz', repos = NULL, type="source")
library(makeR)
as.Date('12-12-2016')
as.Date('2016-12-12')
as.Date('2016-12-12','1')
as.Date('2016-12-12',1,)
calendarHeat(as.Date('2016-12-12'),1)
df.cal <- read.csv('cal.csv', header=TRUE, colClasses = c('character','integer'))
df.cal <- read.csv('cal.csv', header=TRUE, colClasses = c('character','integer'))
calendarHeat(df.cal$Dates, df.cal$Value)
library(shinydashboard)
runApp('D:/OneDrive/Documents/RA/DMDII/qtr')
runApp('D:/OneDrive/Documents/RA/DMDII/qtr')
runApp()
runApp('D:/OneDrive/Documents/RA/DMDII/qtr')
runApp('D:/OneDrive/Documents/RA/DMDII/qtr')
runApp()
runApp('D:/OneDrive/Documents/RA/DMDII/qtr')
runApp('D:/OneDrive/Documents/RA/DMDII/qtr')
runApp()
runApp('D:/OneDrive/Documents/RA/DMDII/qtr')
png(filename = "h1.png", 750, 750, res = 100)
calendarHeat(df.cal$Dates, df.cal$Value)
library(makeR)
calendarHeat(df.cal$Dates, df.cal$Value)
png(filename = "h1.png", 750, 750, res = 100)
calendarHeat(df.cal$Dates, df.cal$Value)
install.packages('chron')
calendarHeat(df.cal$Dates, df.cal$Value)
install.packages('chron')
png(filename = "h1.png", 750, 750, res = 100)
calendarHeat(df.cal$Dates, df.cal$Value)
dev.off()
runApp('D:/OneDrive/Documents/RA/DMDII/qtr')
png(filename = "h1.png", 750, 750, res = 100)
calendarHeat(df.cal$Dates, df.cal$Value)
dev.off()
img1 <- png::readPNG("h1.png")
g <- rasterGrob(img1, interpolate = TRUE)
gg_heatmap <- qplot(1:10, 1:10, geom="blank") + geom_blank() +
annotation_custom(g, xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf) +
new_theme_empty
gg_heatmap <- qplot(1:10, 1:10, geom="blank") + geom_blank() +
annotation_custom(g, xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf)
print(gg_heatmap)
runApp()
runApp('D:/OneDrive/Documents/RA/DMDII/qtr')
calendarHeat(df.cal$Dates, df.cal$Value)
calendarHeat(df.cal$Dates, df.cal$Value)
calendarHeat(df.cal$Dates, df.cal$Value)
calendarHeat(df.cal$Dates, df.cal$Value)
